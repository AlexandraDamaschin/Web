<?xml version="1.0" encoding="UTF-8"?>
<pages>
    <!-- HTML -->
    <page>
        <imgSrc>/Practica/img/html-large.png</imgSrc>
        <imgAlt>htmlLarge</imgAlt>
        <title>HTML</title>
        <stands>Hyper Text Markup Language</stands>
        <description>
            <![CDATA[
             <h3>What is HTML?</h3>
            <p>
                HyperText is the method by which you move around on the web
                — by clicking on special text called hyperlinks which bring you to the next page. The fact that it is hyper just means it is not linear
                — i.e. you can go to any place on the Internet whenever you want by clicking on links
                — there is no set order to do things in.
            Markup is what HTML tags do to the text inside them. They mark it as a certain type of text (italicised text, for example).
            HTML is a Language, as it has code-words and syntax like any other language.
            <img src="/Practica/img/html.png"  width=100%/>
            </p>
            ]]>
        </description>
        <text>
            <![CDATA[
            <p>
                <h3>What is html5?</h3>
                HTML5 is supposed to be what HTML should have been in the first place.
                It is the fifth and current version of the HTML standard.
            </p>

            <p>
            <h3>How does it work?</h3>
            HTML consists of a series of short codes typed into a text-file by the site author
            — these are the tags. The text is then saved as a html file, and viewed through a browser, like Chrome or Internet Explorer. This browser reads the file and translates the text into a visible form, hopefully rendering the page as the author had intended.
            </p>
                <img src="/Practica/img/htmltags.jpg" width=100%/>
            <p>
            <h3>What are the tags up to?</h3>
                The tags are what separate normal text from HTML code. You might know them as the words between the angle-brackets. Different tags will perform different functions. The tags themselves don’t appear when you view your page through a browser, but their effects do.
                If you want to see a list of all tags click here. In our blog, we used some of it.
                 <img src="/Practica/img/htmltag.png" width=100%/>
            </p>

            <p>
                <h3>Is this going to take long?</h3>
                Well, it depends on what you want from it. Knowing HTML will take only a few days of reading and learning the codes for what you want. You can have the basics down in an hour. Once you know the tags you can create HTML pages.
                However, using HTML and designing good websites is a different story. Good website design is half skill and half talent. Learning techniques and correct use of your tag knowledge will improve your work immensely, and a good understanding of general design and the audience you’re trying to reach will improve your website’s chances of success. Luckily, these things can be researched and understood, as long as you’re willing to work at it so you can output better websites.
                The range of skills you will learn as a result of running your own website is impressive. You’ll learn about aspects of graphic design, typography and computer programming. Your efficiency with computers in general increases. You’ll also learn about promotion and your writing will probably improve too, as you adapt to write for certain audiences.
            </p>

            <p>
                <h3>Do I have to be online all the time?</h3>
                Not at all. You can code your entire website offline, storing it all on your own computer, and then just transfer all the files onto the web. Then whenever you have new content, you just add that to the existing online version of your site. It’s really quite simple.
            </p>

            <p>
                <h3>Is there anything HTML can’t do?</h3>
                Of course, but since making websites became more popular and needs increased many other supporting languages have been created to allow new stuff to happen, plus HTML is modified every few years to make way for improvements.
                Cascading Stylesheets are used to control how your pages are presented, and make pages more accessible. Basic special effects and interaction is provided by JavaScript, which adds a lot of power to basic HTML. Most of this advanced stuff is for later down the road, but when using all of these technologies together, you have a lot of power at your disposal.
            </p>
            <img src="/Practica/img/diffhtml.png"  width=100%/>
            ]]>
        </text>
        <buttonEncode>https://codebeautify.org/html-encode-string</buttonEncode>
        <textEncode>HTML encode String</textEncode>
        <buttonDecode>https://codebeautify.org/html-decode-string</buttonDecode>
        <textDecode>HTML decode String</textDecode>
    </page>

    <!-- XML -->
    <page>
        <imgSrc>/Practica/img/xml-large.jpg</imgSrc>
        <imgAlt>xmlLargeImage</imgAlt>
        <title>XML</title>
        <stands>eXtensible Markup Language</stands>
        <description>
            <![CDATA[
            XML is a markup language much like HTML
            XML was designed to store and transport data
            XML was designed to be self-descriptive
            XML is a W3C Recommendation
            ]]>
        </description>
        <text>
            <![CDATA[
            <p>
                <h3>Why Study XML?</h3>
                XML plays an important role in many different IT systems.
                XML is often used for distributing data over the Internet.
                It is important (for all types of software developers!) to have a good understanding of XML.
            </p>

            <img src="/Practica/img/useXml.png"/>
            <img src="/Practica/img/xml.png" />
            <p>
            </br>
                 <h3>XML Does Not DO Anything</h3>
                Maybe it is a little hard to understand, but XML does not DO anything.
                The XML above is quite self-descriptive:
                It has sender information.
                It has receiver information
                It has a heading
                It has a message body.
                But still, the XML above does not DO anything. XML is just information wrapped in tags.
            </p>

            <p>
                <h3>The Difference Between XML and HTML</h3>
                XML and HTML were designed with different goals:
                XML was designed to carry data - with focus on what data is
                HTML was designed to display data - with focus on how data looks
                XML tags are not predefined like HTML tags are.
                 <img src="/Practica/img/XMLvsHTML.png" width=100%/>
            </p>

            <p>
                <h3>XML Does Not Use Predefined Tags</h3>
            The XML language has no predefined tags.
            The tags in the example above (like to and from) are not defined in any XML standard. These tags are "invented" by the author of the XML document.
            HTML works with predefined tags.
            With XML, the author must define both the tags and the document structure.
             </p>

            <p>
                <h3>XML Simplifies Things</h3>
                It simplifies data sharing
                It simplifies data transport
                It simplifies platform changes
                It simplifies data availability
                Many computer systems contain data in incompatible formats. Exchanging data between incompatible systems (or upgraded systems) is a time-consuming task for web developers. Large amounts of data must be converted, and incompatible data is often lost.
                XML stores data in plain text format. This provides a software- and hardware-independent way of storing, transporting, and sharing data.
                XML also makes it easier to expand or upgrade to new operating systems, new applications, or new browsers, without losing data.
                With XML, data can be available to all kinds of "reading machines" like people, computers, voice machines, news feeds, etc.
            </p>

            <img src="/Practica/img/xmltreee.jpg" width=100%/>

            <p>
                <h3>XML Tree Structure</h3>
                XML documents are formed as element trees.
                An XML tree starts at a root element and branches from the root to child elements.
                All elements can have sub elements (child elements)
                The terms parent, child, and sibling are used to describe the relationships between elements.
                Parent have children. Children have parents. Siblings are children on the same level (brothers and sisters).
                All elements can have text content (Harry Potter) and attributes (category="cooking").
                In XML, it is illegal to omit the closing tag. All elements must have a closing tag:
            </p>
            ]]>
        </text>
        <buttonEncode>https://codebeautify.org/xmltojson</buttonEncode>
        <textEncode>XML to JSON</textEncode>
        <buttonDecode>https://codebeautify.org/xml-to-html-converter</buttonDecode>
        <textDecode>XML to HTML</textDecode>
    </page>

    <!-- JSON -->
    <page>
        <imgSrc>/Practica/img/json-large.png</imgSrc>
        <imgAlt>jsonLargeImage</imgAlt>
        <title>JSON</title>
        <stands>JavaScript Object Notation</stands>
        <description>
            <![CDATA[
            JSON is a syntax for storing and exchanging data.
            JSON is text, written with JavaScript object notation.
            JSON uses JavaScript syntax, but the JSON format is text only.
            Text can be read and used as a data format by any programming language.
            ]]>
        </description>
        <text>
            <![CDATA[
            <p>
                <h3>Why use JSON?</h3>
                Since the JSON format is text only, it can easily be sent to and from a server, and used as a data format by any programming language.
                JavaScript has a built in function to convert a string, written in JSON format, into native JavaScript objects:
                JSON.parse()
                So, if you receive data from a server, in JSON format, you can use it like any other JavaScript object.
            </p>

            <p>
                <h3>JSON Syntax Rules</h3>
                JSON syntax is derived from JavaScript object notation syntax:
                Data is in name/value pairs
                Data is separated by commas
                Curly braces hold objects
                Square brackets hold arrays
            </p>

                <img src="/Practica/img/jsonformater.png" width=50%/>
            <p>
                <h3>JSON is Like XML Because</h3>
                Both JSON and XML are "self describing" (human readable)
                Both JSON and XML are hierarchical (values within values)
                Both JSON and XML can be parsed and used by lots of programming languages
                Both JSON and XML can be fetched with an XMLHttpRequest
            </p>

            <p>
                <h3>JSON is Unlike XML Because</h3>
                JSON doesn't use end tag
                JSON is shorter
                JSON is quicker to read and write
                JSON can use arrays
                The biggest difference is:
                XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function.
            </p>
                 <img src="/Practica/img/xmlVSjson.png" width=100%/>
            <p>
                <h3>Why JSON is Better Than XML</h3>
                XML is much more difficult to parse than JSON.
                JSON is parsed into a ready-to-use JavaScript object.
                For AJAX applications, JSON is faster and easier than XML:
                Using XML
                Fetch an XML document
                Use the XML DOM to loop through the document
                Extract values and store in variables
                Using JSON
                Fetch a JSON string
                JSON.Parse the JSON string
            </p>
            ]]>
        </text>
        <buttonEncode>https://codebeautify.org/jsontoxml</buttonEncode>
        <textEncode>JSON to XML</textEncode>
        <buttonDecode>https://codebeautify.org/json-to-html-converter</buttonDecode>
        <textDecode>JSON to HTML</textDecode>
    </page>

    <!-- CSS -->
    <!-- CSS -->
    <page>
        <imgSrc>/Practica/img/css-large.jpg</imgSrc>
        <imgAlt>cssLargeImage</imgAlt>
        <title>CSS</title>
        <stands> Cascading Style Sheets</stands>
        <date> </date>
        <description>
            <![CDATA[
            July 15,2017<br /><br />
            CSS is a simple design language intended to simplify the process of making web pages presentable.
            ]]>
        </description>
        <text>
            <![CDATA[
            <p class="stil2">
                <h3>Why use CSS?</h3>
                CSS handles the look of a web page.
                Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and laid out, what background images or colors are used, layout designs,variations in display for different devices and screen sizes as well as a variety of other effects.
                CSS is easy to learn and understand but it provides powerful control over the presentation of an HTML document.

            </p>

            <p class="stil2">
                <h3>Advantages of CSS</h3>
•	CSS saves time − You can reuse same sheet in multiple HTML pages.<br />
•	Pages load faster − write one CSS rule of a tag and apply it to all the occurrences of that tag.<br />
•	Easy maintenance − To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.<br />
•	Superior styles to HTML − you can give a far better look to your HTML page in comparison to HTML attributes.<br />
•	Multiple Device Compatibility − Style sheets allow content to be optimized for more than one type of device.<br />
•	Global web standards − Now HTML attributes are being deprecated and it is being recommended to use CSS.
So its a good idea to start using CSS in all the HTML pages to make them compatible to future browsers.<br />
•	Offline Browsing − CSS can store web applications locally with the help of an offline catche.Using of this, we can view offline websites.
The cache also ensures faster loading and better overall performance of the website.<br />
•	Platform Independence − The Script offer consistent platform independence and can support latest browsers as well.

            </p>

            <p class="stil2">
                <h3>CSS Version</h3>
               CSS3 was became a W3C recommendation in June 1999 and builds on older versions CSS.
                It is the actual version.

            </p>

            <p class="stil2">
                <h3>CSS Syntax</h3>
          A style rule is made of three parts :<br />
•	Selector;<br />
•	Property;<br />
•	Value.<br /><br />

<img src="img/wife.jpg" alt="wife" style="display: block;margin: auto;width: 40%;">
            </p>

            <p class="stil2">
                <h3>CSS - Inclusion</h3>
There are four ways to associate styles with your HTML document. What we used?
<br />
•	External CSS - The <link> Element:
<br />
The <link> element can be used to include an external stylesheet file in your HTML document.
An external style sheet is a separate text file with ".css" extension were you define all the Style rules.
The generic syntax of including external CSS file : &ltlink REL="STYLESHEET" TYPE="text/css" HREF="[Style sheet URL]"&gt.
             </p>
              <p class="stil2">
                <h3>CSS Rules Overriding</h3>
•	Any inline style sheet takes highest priority.So, it will override any rule defined in <style>...</style> tags or rules defined in any external style sheet file.<br />
•	Any rule defined in <style>...</style> tags will override rules defined in any external style sheet file.<br />
•	Any rule defined in external style sheet file takes lowest priority, and rules defined in this file will be applied only when above two rules are not applicable.


            </p>

              <p class="stil2">
                <h3>CSS Comments</h3>
         Many times, you may need to put additional comments in your style sheet blocks.
         So, it is very easy to comment any part in style sheet.
         You can simple put your comments inside /*.....this is a comment in style sheet.....*/.

            </p>

             <p class="stil2">
                <h3>CSS - Colors</h3>







<!-- sticky notes -->
            <ul id="listasticky">
                <li class="blueM elementsticky"><a href=""><h20>CSS uses color values to specify a color.</h20></a></li>
                <li class="yellowM elementsticky"><a href="" ><h20> You can specify your color values in various formats.</h20></a></li>
                <li class="greenM elementsticky"><a href="" ><h20>Hex Code<br />#RRGGBB	<br />p{<br />color:#FF0000;<br />}</h20></a></li>
                <li class="pinkM elementsticky"><a href="" ><h20>Short Hex Code<br />	#RGB	<br/>p{<br />color:#6A7;<br />}</h20></a></li>
                <li class="greenM elementsticky"><a href="" ><h20>RGB %	<br />rgb(rr%,gg%,<br />bb%)<br />p{color:rgb<br />(50%,50%,50%);<br />}</h20></a></li>
                <li class="purpleM elementsticky"><a href="" ><h20>RGB Absolute<br />rgb(rrr,ggg,bbb)<br />	p{color:<br />rgb(0,0,255);<br />}</h20></a></li>
                <li class="blueM elementsticky"><a href="" ><h20>#titanic {</h20><p class="aliniere">float : none;<br /> }</p></a></li>
                <li class="orangeM elementsticky"><a href="" ><h20>.ninja {</h20><p class="aliniere">color : black;<br /> }</p></a></li>
            </ul>
<!-- end sticky notes -->
</p>

 <p class="stil2">
                <h3>CSS - Fonts</h3>
Font properties of an element:<br />
•	The font-family property is used to change the face of a font.<br />
•	The font-style property is used to make a font italic or oblique.<br />
•	The font-variant property is used to create a small-caps effect.<br />
•	The font-weight property is used to increase or decrease how bold or light a font appears.<br />
•	The font-size property is used to increase or decrease the size of a font.<br />
•	The font property is used as shorthand to specify a number of other font properties.<br />
<br />
You can also :
<br />

<div class="wrapper">

<a href="#example" class="openModal">Set the Text Font</a>
<a href="#example2" class="openModal">Set the Space between Characters</a>
<a href="#example3" class="openModal">Set the Text Alignment</a>
<a href="#example4" class="openModal">Set the Text Cases</a>
<aside id="example" class="modal">
    <div>
        <h2>Set the text Font</h2>
        <p>.body,h1,h2,h3,h4,h5,.stil2{<br /><br />font-family: "Raleway", sans-serif;<br /><br />}</p>
        <a href="#close" title="Close">Close</a>
    </div>
</aside>
<aside id="example2" class="modal">
    <div>
        <h2>Set the Space between Characters</h2>
        <p>.space{<br /><br />letter-spacing: 0.5px;<br /><br />}</p>
        <a href="#close" title="Close">Close</a>
    </div>
</aside>
<aside id="example3" class="modal">
    <div>
        <h2>Set the Text Alignment</h2>
        <p>.modal {<br /><br />text-align: center;<br /><br />}</p>
        <a href="#close" title="Close">Close</a>
    </div>
</aside>
<aside id="example4" class="modal">
    <div>
        <h2>Set the Text Cases</h2>
        <p>p.normal {<br />font-style: normal;<br />}<br /><br />p.italic {<br />font-style: italic;<br />}<br /><br />p.oblique {<br />font-style: oblique;<br />}</p>
        <a href="#close" title="Close">Close</a>
    </div>
</aside>

</div>
</p>

            <p class="stil2>
            <h3> And play with Animation...like we did.</h3>
            </p>

</p>
            ]]>

        </text>
        <buttonEncode>http://css2sass.herokuapp.com/</buttonEncode>
        <textEncode>CSS to SASS</textEncode>
        <buttonDecode>https://www.sassmeister.com/</buttonDecode>
        <textDecode>SASS to CSS</textDecode>
    </page>
    <!-- SASS -->
    <page>
        <imgSrc>/Practica/img/sass-large.png</imgSrc>
        <imgAlt>sassLargeImage</imgAlt>
        <title>SASS</title>
        <stands>Syntactically Awesome StyleSheets</stands>
        <date> </date>
        <description>
            <![CDATA[
            July 20, 2017
            <br /> <br />
            Sass is an extension of CSS that enables you to use things like variables, nested rules, inline imports and more.
            It also helps to keep things organised and allows you to create style sheets faster.
            ]]>
        </description>
        <text>
            <![CDATA[

<ul class="tree">
  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c1" />
      <label class="tree_label" for="c1">Why Use SASS?</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c2" >•  Fully CSS-compatible<br />•  Language extensions such as variables, nesting, and mixins<br />•  Many useful functions for manipulating colors and other values<br />•  Well-formatted, customizable output</label>
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>


  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c3" />
      <label class="tree_label" for="c3">SASS Syntax</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c4" > Sass includes two syntax options:
               <br />
•	SCSS (Sassy CSS):
<br />
Uses the ".scss" file extension and is fully compliant with CSS syntax;
<br />
•	Indented (simply called 'Sass'):
<br />
Uses ".sass" file extension and indentation rather than brackets; it is not fully compliant with CSS syntax, but it's quicker to write;
Note that files can be converted from one syntax to the other using the sass-convert command.</label>

      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c5" />
      <label class="tree_label" for="c5">Variables</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c6" >  Just like other programming languages, Sass allows the use of variables that can store information you can use throughout your style sheet.
               For example, you can store a colour value in a variable at the top of the file, and then use this variable when setting the colour of your elements.
               This enables you to quickly change your colours without having to modify each line separately.</label>
               <br />
               <img src="img/sass-css1.png" alt="bla" style="display: block;margin: auto;width: 100%;">
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

<li class="treeelement">
      <input type="checkbox" checked="checked" id="c7" />
      <label class="tree_label" for="c7">Nesting</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c8" >  Nesting is a double-edged sword.
                While it provides an excellent method for reducing the amount of code you need to write, it can also lead to over-qualified CSS if not executed carefully.
                The idea is to nest your CSS selectors in such a way as to mimic your HTML hierarchy.
                The following shows a basic navigation style that uses nesting:</label>
                <br />
                <img src="img/saaa.png" alt="wife" style="display: block;margin: auto;width: 100%;">
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c9" />
      <label class="tree_label" for="c9">Partials</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c10" > Partials are smaller Sass files that can be imported (see next section) into other Sass files.
               Think of partials as code snippets.
               With these code snippets, your CSS can now be modular and easier to maintain.
               A partial is designated as such by naming it with a leading underscore: "_partial.scss".</label>

      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c11" />
      <label class="tree_label" for="c11">Import</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c12" >  Used with Partials (see previous section), the @import directive allows you to import your partial files into the current file, to build one single CSS file.
               Be mindful of how many imports you're using as an HTTP request will be generated for each one.</label>
               <br />
               <img src="img/sass-css2.png" alt="wife" style="display: block;margin: auto;width: 100%;">
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

  <li class="treeelement">
      <input type="checkbox" checked="checked" id="c13" />
      <label class="tree_label" for="c13">Mixins</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c14" >  One of the advantages of using preprocessors is their ability to take complex, long-winded code and simplify it. This is where mixins come in handy!
               For example, if you need to include the vendor prefixes, you can use a mixin instead.
               Take a look at this example for border-radius:
<img src="img/sass-css3.png" alt="wife" style="display: block;margin: auto;width: 50%;">
Notice the @mixin directive at the top. It has been given the name border-radius and uses the variable $radius as its parameter. This variable is used to set the radius value for each element.
Later, the @include directive is called, along with the mixin name (border-radius) and a parameter (10px). Thus .box { @include border-radius(10px); }.
The following CSS is produced:

<img src="img/sass-css4.png" alt="wife" style="display: block;margin: auto;width: 50%;"></label>
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

   <li class="treeelement">
      <input type="checkbox" checked="checked" id="c15" />
      <label class="tree_label" for="c15">Extend/Inheritance</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c16" >   The @extend directive has been called one of Sass' most powerful features.
                After seeing it in action, it's clear why.
                The idea is that with this directive you won't have to include multiple class names on your HTML elements and can keep your code DRY.
                Your selectors can inherit the styles of other selectors, and then be easily extended when required.
                Now that's powerful.</label>

      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

 <li class="treeelement">
      <input type="checkbox" checked="checked" id="c17" />
      <label class="tree_label" for="c17">Operators</label>
    <ul class="treelist">
      <li class="treeelement">
         <label for="c18" >   Having the ability to perform calculations in your CSS allows you to do more, like convert pixel values into percentages.
                You'll have access to standard maths functions like addition, subtraction, multiplication and division.
                Of course, these functions can be combined to create complex calculations.
                In addition, Sass includes a few built-in functions to help manipulate numbers.
                Functions like percentage(), floor() and round() to name a few.</label>
<img src="img/sass-getting-started.jpg" alt="bla" style="display: block;margin: auto;width: 100%;">
      </li>
       <li class="treeelement">
        <input type="checkbox" id="c" />
        <ul class="treelist">
          <li class="treeelement">
            <ul class="treelist">
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>

</ul>

            ]]>
        </text>
        <buttonEncode>https://www.sassmeister.com/</buttonEncode>
        <textEncode>SASS to CSS</textEncode>
        <buttonDecode>http://css2sass.herokuapp.com/</buttonDecode>
        <textDecode>CSS to SASS</textDecode>

    </page>
</pages>